//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/ControlMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlMap"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""908f86c8-813f-46e2-a648-0d5ede0198f9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5343d182-846d-4faf-8018-e6f83475cfa3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartBuild"",
                    ""type"": ""Button"",
                    ""id"": ""1a8cb26c-d87d-4f8d-aae7-bbd839a93d0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheckUnitDetail"",
                    ""type"": ""Button"",
                    ""id"": ""990bc3da-2d5b-4fd5-8382-0d3d08134a5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6b93e1b1-e977-4b3c-b7e5-b87782557747"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ec51498b-187b-4581-a243-2afb34c688f2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""daf97a92-8968-4710-ad17-178d730aec3b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d93acd0c-b70f-4bd6-8800-544bf0859ea4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""089517da-a4ce-496c-a0ea-e36ec9e345e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ecb0fadf-7248-4d1d-ac8f-e87ccf0fc01a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartBuild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3bb5665-0bb5-4e8c-9b40-586b8e3121ac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheckUnitDetail"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Build"",
            ""id"": ""ced9ee2f-21e7-46b9-bdaf-247f5ce477ea"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""87ae5361-060a-4e7f-a2d2-b5cb784507f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BuildUnit"",
                    ""type"": ""Button"",
                    ""id"": ""ae96a074-bf27-4f3c-872b-1ff872d02927"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftBuild"",
                    ""type"": ""Button"",
                    ""id"": ""b82c5972-988a-45fa-979d-8b3efa2e493d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateDir"",
                    ""type"": ""Button"",
                    ""id"": ""db70cac9-493e-49ec-938d-fa4da35974be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeBuildUnit"",
                    ""type"": ""Button"",
                    ""id"": ""e7ad24c5-bb31-4953-a352-139d80d58996"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c99c2359-3e48-42aa-bedb-3036fadf312c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41d6dffd-19e9-4a44-934a-6ef97956e177"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8b7269ec-c407-46ac-b9ee-369a965452ea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3ef6d30e-a674-437b-978a-da020ac086a5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""52572d13-b749-46c0-8456-9a0f87bb3425"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""095dd8d7-0c76-494d-b3b3-42252481fa07"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89c30d51-f128-4717-a1e3-cb5109c50f83"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftBuild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76f699eb-40a1-4695-b2d4-412fece24b83"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b047991-2f59-4107-80f8-6134c44d70fe"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeBuildUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Move = m_Move.FindAction("Move", throwIfNotFound: true);
        m_Move_StartBuild = m_Move.FindAction("StartBuild", throwIfNotFound: true);
        m_Move_CheckUnitDetail = m_Move.FindAction("CheckUnitDetail", throwIfNotFound: true);
        // Build
        m_Build = asset.FindActionMap("Build", throwIfNotFound: true);
        m_Build_Move = m_Build.FindAction("Move", throwIfNotFound: true);
        m_Build_BuildUnit = m_Build.FindAction("BuildUnit", throwIfNotFound: true);
        m_Build_LeftBuild = m_Build.FindAction("LeftBuild", throwIfNotFound: true);
        m_Build_RotateDir = m_Build.FindAction("RotateDir", throwIfNotFound: true);
        m_Build_ChangeBuildUnit = m_Build.FindAction("ChangeBuildUnit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_Move;
    private readonly InputAction m_Move_StartBuild;
    private readonly InputAction m_Move_CheckUnitDetail;
    public struct MoveActions
    {
        private @ControlMap m_Wrapper;
        public MoveActions(@ControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Move_Move;
        public InputAction @StartBuild => m_Wrapper.m_Move_StartBuild;
        public InputAction @CheckUnitDetail => m_Wrapper.m_Move_CheckUnitDetail;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnMove;
                @StartBuild.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnStartBuild;
                @StartBuild.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnStartBuild;
                @StartBuild.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnStartBuild;
                @CheckUnitDetail.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnCheckUnitDetail;
                @CheckUnitDetail.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnCheckUnitDetail;
                @CheckUnitDetail.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnCheckUnitDetail;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @StartBuild.started += instance.OnStartBuild;
                @StartBuild.performed += instance.OnStartBuild;
                @StartBuild.canceled += instance.OnStartBuild;
                @CheckUnitDetail.started += instance.OnCheckUnitDetail;
                @CheckUnitDetail.performed += instance.OnCheckUnitDetail;
                @CheckUnitDetail.canceled += instance.OnCheckUnitDetail;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Build
    private readonly InputActionMap m_Build;
    private IBuildActions m_BuildActionsCallbackInterface;
    private readonly InputAction m_Build_Move;
    private readonly InputAction m_Build_BuildUnit;
    private readonly InputAction m_Build_LeftBuild;
    private readonly InputAction m_Build_RotateDir;
    private readonly InputAction m_Build_ChangeBuildUnit;
    public struct BuildActions
    {
        private @ControlMap m_Wrapper;
        public BuildActions(@ControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Build_Move;
        public InputAction @BuildUnit => m_Wrapper.m_Build_BuildUnit;
        public InputAction @LeftBuild => m_Wrapper.m_Build_LeftBuild;
        public InputAction @RotateDir => m_Wrapper.m_Build_RotateDir;
        public InputAction @ChangeBuildUnit => m_Wrapper.m_Build_ChangeBuildUnit;
        public InputActionMap Get() { return m_Wrapper.m_Build; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildActions set) { return set.Get(); }
        public void SetCallbacks(IBuildActions instance)
        {
            if (m_Wrapper.m_BuildActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnMove;
                @BuildUnit.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnBuildUnit;
                @BuildUnit.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnBuildUnit;
                @BuildUnit.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnBuildUnit;
                @LeftBuild.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnLeftBuild;
                @LeftBuild.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnLeftBuild;
                @LeftBuild.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnLeftBuild;
                @RotateDir.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotateDir;
                @RotateDir.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotateDir;
                @RotateDir.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotateDir;
                @ChangeBuildUnit.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnChangeBuildUnit;
                @ChangeBuildUnit.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnChangeBuildUnit;
                @ChangeBuildUnit.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnChangeBuildUnit;
            }
            m_Wrapper.m_BuildActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @BuildUnit.started += instance.OnBuildUnit;
                @BuildUnit.performed += instance.OnBuildUnit;
                @BuildUnit.canceled += instance.OnBuildUnit;
                @LeftBuild.started += instance.OnLeftBuild;
                @LeftBuild.performed += instance.OnLeftBuild;
                @LeftBuild.canceled += instance.OnLeftBuild;
                @RotateDir.started += instance.OnRotateDir;
                @RotateDir.performed += instance.OnRotateDir;
                @RotateDir.canceled += instance.OnRotateDir;
                @ChangeBuildUnit.started += instance.OnChangeBuildUnit;
                @ChangeBuildUnit.performed += instance.OnChangeBuildUnit;
                @ChangeBuildUnit.canceled += instance.OnChangeBuildUnit;
            }
        }
    }
    public BuildActions @Build => new BuildActions(this);
    public interface IMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnStartBuild(InputAction.CallbackContext context);
        void OnCheckUnitDetail(InputAction.CallbackContext context);
    }
    public interface IBuildActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBuildUnit(InputAction.CallbackContext context);
        void OnLeftBuild(InputAction.CallbackContext context);
        void OnRotateDir(InputAction.CallbackContext context);
        void OnChangeBuildUnit(InputAction.CallbackContext context);
    }
}
